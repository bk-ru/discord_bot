from __future__ import annotations
import asyncio

import re
import traceback
from typing import Tuple

import discord
from discord import ButtonStyle, Interaction, ui
from tortoise.queryset import QuerySet  # type: ignore

from database.models import LabWork, User
from utils.feedback import send_feedback_message

from .utils import safe_respond


class LabReviewView(ui.View):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."""

    def __init__(self, labwork: LabWork):
        super().__init__(timeout=None)
        self.labwork = labwork  # ORM –æ–±—ä–µ–∫—Ç LabWork

    async def _get_student(
        self,
        guild: discord.Guild,
        interaction: Interaction,
    ) -> Tuple[discord.Member | None, User | None]:
        user_obj = getattr(self.labwork, "user", None)
        if not user_obj:
            try:
                await self.labwork.fetch_related("user")
                user_obj = self.labwork.user
            except Exception:
                user_obj = await User.get_or_none(id=getattr(self.labwork, "user_id", None))

        if isinstance(user_obj, QuerySet):
            user_obj = await user_obj.first()

        discord_member = None
        discord_id = getattr(user_obj, "discord_id", None) if user_obj else None

        if discord_id:
            discord_member = guild.get_member(discord_id) or await guild.fetch_member(discord_id)

        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å: –¥–æ—Å—Ç–∞—ë–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º discord_id –≤ –ë–î
        if discord_member is None:
            parsed = await self._extract_student_from_teacher_message(interaction)
            if parsed:
                discord_member = parsed
                if user_obj and (not getattr(user_obj, "discord_id", None) or user_obj.discord_id != parsed.id):
                    try:
                        await User.filter(id=user_obj.id).update(discord_id=parsed.id)
                        user_obj.discord_id = parsed.id
                    except Exception:
                        pass

        return discord_member, user_obj

    async def _extract_student_from_teacher_message(self, interaction: Interaction) -> discord.Member | None:
        msg_id = getattr(self.labwork, "teacher_message_id", None)
        channel_id = getattr(self.labwork, "teacher_channel_id", None)
        if not msg_id:
            return None

        channel: discord.TextChannel | None = None
        if channel_id:
            channel = interaction.guild.get_channel(channel_id)
        if channel is None or not isinstance(channel, discord.TextChannel):
            channel = interaction.channel if isinstance(interaction.channel, discord.TextChannel) else None
        if channel is None:
            return None

        try:
            msg = await channel.fetch_message(msg_id)
        except Exception:
            return None

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º—ã–µ mentions ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ
        if msg.mentions:
            mention = msg.mentions[0]
            return interaction.guild.get_member(mention.id) or await interaction.guild.fetch_member(mention.id)

        # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ embed.description
        if msg.embeds:
            desc = (msg.embeds[0].description or "")
            match = re.search(r"<@!?(\d+)>", desc)
            if match:
                uid = int(match.group(1))
                try:
                    return interaction.guild.get_member(uid) or await interaction.guild.fetch_member(uid)
                except Exception:
                    return None
        return None

    async def _process_result(
        self,
        interaction: Interaction,
        *,
        status: str,
        teacher_reply: str,
        feedback: str | None = None,
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å, —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –æ—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
        self.labwork.status = status
        update_fields: list[str] = ['status']
        if feedback is not None:
            self.labwork.feedback = feedback
            update_fields.append('feedback')
        try:
            await self.labwork.save(update_fields=update_fields)
        except Exception as error:
            guild = interaction.guild
            if guild:
                await send_feedback_message(guild, f'‚ùå save(status/feedback) failed: {error}')

        wait_for_file = status == '–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
        response_text = teacher_reply
        if wait_for_file:
            response_text += "\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –æ–Ω –≥–æ—Ç–æ–≤."
        await safe_respond(interaction, response_text, ephemeral=True)

        corrected_url = None
        if wait_for_file:
            corrected_url = await self._collect_corrected_file(interaction)
            if corrected_url:
                self.labwork.teacher_file_url = corrected_url
                try:
                    await self.labwork.save(update_fields=['teacher_file_url'])
                except Exception as error:
                    if interaction.guild:
                        await send_feedback_message(interaction.guild, f'‚ö†Ô∏è save(teacher_file_url) failed: {error}')

        await self._notify_student_and_channel(interaction, status, feedback)
        await self._delete_teacher_message(interaction)

        if status == "–∑–∞—á—Ç–µ–Ω–æ":
            # –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—á—ë—Ç–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            try:
                if interaction.message:
                    await interaction.message.delete()
            except Exception:
                pass

    async def _notify_student_and_channel(
        self,
        interaction: Interaction,
        status: str,
        feedback: str | None = None,
    ) -> None:
        member, user_obj = await self._get_student(interaction.guild, interaction)
        status_text = status.capitalize()
        embed = discord.Embed(
            title=f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è ‚Ññ{self.labwork.lab_number}",
            description=f"**–°—Ç–∞—Ç—É—Å:** {status_text}",
            color=discord.Color.green() if status == "–∑–∞—á—Ç–µ–Ω–æ" else discord.Color.orange(),
        )
        if feedback:
            embed.add_field(name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", value=feedback, inline=False)
        if self.labwork.file_url:
            embed.add_field(name="–§–∞–π–ª", value=self.labwork.file_url, inline=False)
        if self.labwork.teacher_file_url:
            embed.add_field(name='–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª', value=self.labwork.teacher_file_url, inline=False)

        if member:
            try:
                await member.send(embed=embed)
            except Exception as error:
                if interaction.guild:
                    await send_feedback_message(
                        interaction.guild,
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —Å—Ç—É–¥–µ–Ω—Ç—É {member.display_name}: {error}",
                    )

        channel_id = getattr(self.labwork, "student_channel_id", None)
        if channel_id:
            channel = interaction.guild.get_channel(channel_id)
            if channel and isinstance(channel, discord.TextChannel):
                try:
                    await channel.send(member.mention if member else "–°—Ç—É–¥–µ–Ω—Ç", embed=embed)
                except Exception:
                    pass

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if user_obj and member:
            if user_obj.discord_id != member.id:
                try:
                    await User.filter(id=user_obj.id).update(discord_id=member.id)
                except Exception:
                    pass

    async def _collect_corrected_file(self, interaction: Interaction) -> str | None:
        channel = interaction.channel
        if channel is None or not hasattr(channel, 'id'):
            return None

        try:
            await interaction.followup.send(
                "üìé –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                ephemeral=True,
            )
        except Exception:
            pass

        def check(message: discord.Message) -> bool:
            return (
                message.author.id == interaction.user.id
                and message.channel.id == channel.id
                and bool(message.attachments)
            )

        try:
            response = await interaction.client.wait_for('message', timeout=60, check=check)
        except asyncio.TimeoutError:
            try:
                await interaction.followup.send('‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω.', ephemeral=True)
            except Exception:
                pass
            return None

        attachment = response.attachments[0]
        try:
            await interaction.followup.send('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.', ephemeral=True)
        except Exception:
            pass

        if interaction.guild:
            await send_feedback_message(
                interaction.guild,
                f'üìé {interaction.user.mention} –ø—Ä–∏–ª–æ–∂–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ‚Ññ{self.labwork.lab_number}: {attachment.url}',
            )

        return attachment.url

    async def _delete_teacher_message(self, interaction: Interaction) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏."""
        msg_id = getattr(self.labwork, "teacher_message_id", None)
        channel_id = getattr(self.labwork, "teacher_channel_id", None)
        if not msg_id:
            return

        channel: discord.TextChannel | None = None
        if channel_id:
            channel = interaction.guild.get_channel(channel_id)
        if channel is None or not isinstance(channel, discord.TextChannel):
            channel = interaction.channel if isinstance(interaction.channel, discord.TextChannel) else None

        if channel:
            try:
                msg = await channel.fetch_message(msg_id)
                await msg.delete()
            except Exception:
                pass

        self.labwork.teacher_message_id = None
        self.labwork.teacher_channel_id = None
        try:
            await self.labwork.save(update_fields=["teacher_message_id", "teacher_channel_id"])
        except Exception as error:
            if interaction.guild:
                await send_feedback_message(
                    interaction.guild,
                    f"‚ö†Ô∏è cleanup pointers failed: {error}",
                )

    @ui.button(label="–ó–∞—á—Ç–µ–Ω–æ ‚úÖ", style=ButtonStyle.success)
    async def accept(self, interaction: Interaction, button: ui.Button) -> None:  # noqa: ARG002
        await self._process_result(
            interaction,
            status="–∑–∞—á—Ç–µ–Ω–æ",
            teacher_reply=f"‚úÖ –†–∞–±–æ—Ç–∞ ‚Ññ{self.labwork.lab_number} –∑–∞—á—Ç–µ–Ω–∞.",
        )

    @ui.button(label="–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É üõ†Ô∏è", style=ButtonStyle.danger)
    async def review(self, interaction: Interaction, button: ui.Button) -> None:  # noqa: ARG002
        modal = FeedbackModal(self.labwork, parent_view=self)
        await interaction.response.send_modal(modal)


class FeedbackModal(ui.Modal, title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π"):
    feedback = ui.TextInput(
        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        style=discord.TextStyle.paragraph,
        required=True,
    )

    def __init__(self, labwork: LabWork, parent_view: LabReviewView):
        super().__init__()
        self.labwork = labwork
        self.parent_view = parent_view

    async def on_submit(self, interaction: Interaction) -> None:
        try:
            await self.parent_view._process_result(
                interaction,
                status="–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É",
                teacher_reply="‚úçÔ∏è –†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
                feedback=self.feedback.value,
            )
        except Exception as error:
            tb = traceback.format_exc()
            if interaction.guild:
                await send_feedback_message(
                    interaction.guild,
                    f"‚ö†Ô∏è Modal submit failed: {error}\n```py\n{tb}\n```",
                )
            await safe_respond(
                interaction,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ feedback.",
                ephemeral=True,
            )
